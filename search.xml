<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>AVL | 二叉搜索树的自平衡</title>
      <link href="2021/08/01/AVL/"/>
      <url>2021/08/01/AVL/</url>
      
        <content type="html"><![CDATA[<h2 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h2><p>什么是二叉搜索树？</p><p>二叉搜索树是一种节点值之间具有一定数量级次序的二叉树，对于树中每个节点：</p><ul><li><p>若其左子树存在，则其左子树中每个节点的值都不大于该节点值；</p></li><li><p>若其右子树存在，则其右子树中每个节点的值都不小于该节点值。</p></li></ul><p>什么是平衡二叉树？</p><p>平衡二叉树也叫自平衡二叉搜索树（Self-Balancing Binary Search Tree），所以其本质也是一颗二叉搜索树，不过为了限制左右子树的高度差，避免出现倾斜树等偏向于线性结构演化的情况，所以对二叉搜索树中每个节点的左右子树作了限制，左右子树的高度差称之为平衡因子，树中每个节点的平衡因子绝对值不大于 1，此时二叉搜索树称之为平衡二叉树。</p><span id="more"></span><h2 id="2、AVL的相关接口实现"><a href="#2、AVL的相关接口实现" class="headerlink" title="2、AVL的相关接口实现"></a>2、AVL的相关接口实现</h2><p>平衡二叉树相关的接口和二叉搜索树的接口高度相似，对比而言，只是多了一个平衡的操作。这样的一个平衡操作主要体现在<strong>新增节点</strong>和<strong>删除节点</strong>。</p><h3 id="1、AVL的结点定义"><a href="#1、AVL的结点定义" class="headerlink" title="1、AVL的结点定义"></a>1、AVL的结点定义</h3><pre><code class="c++">template&lt;typename Key, typename Value&gt;class AVLTree&#123;private:    struct Node&#123;        Key key;        Value value;        Node *left;        Node *right;                int height;         //AVL树是通过平衡因子进行自平衡的，而平衡因子是通过左右子树高度差的来的        //所以AVL树的Node节点要比平衡二叉树多一个高度的成员变量                Node(Key key, Value value)&#123;            this-&gt;key = key;            this-&gt;value = value;            this-&gt;left = this-&gt;right = NULL;        &#125;            &#125;;    Node *root;    //根节点    int count; //设置一个count，统计二叉搜索树下的节点数量 public:    ......&#125;;</code></pre><h3 id="2、AVL的自平衡逻辑"><a href="#2、AVL的自平衡逻辑" class="headerlink" title="2、AVL的自平衡逻辑"></a>2、AVL的自平衡逻辑</h3><p>二叉搜索树的插入思路其实很清晰，但是插入之后如何验证该树是否需要进行平衡呢？</p><p>AVL树的自平衡通过每个节点的平衡因子实现的。我们约定平衡因子是左子树的高度减去右子树的高度，具体的代码实现如下。</p><pre><code class="c++">int getBalanceFactor(Node *node)&#123;    if(node == NULL)        return 0;       int factor = getHeight(node-&gt;left) - getHeight(node-&gt;right);    return factor;&#125;</code></pre><p>上述平衡因子的实现很好理解，但是平衡因子的大小意味着什么呢？</p><p>刚刚说了，平衡因子其实是左节点的高度减去右节点的高度。可以明白的是，如果平衡因子是正数，那么该该节点的左子树肯定是要比右子树高的。同理，如果平衡因子是负数，那么该节点的右子树肯定是要比左子树高的。</p><p>根据AVL的平衡条件，如果平衡因子（绝对值）大于1了，说明该树需要平衡了。那么应该如何做到平衡呢？分以下几个情况分析。</p><p><img src="https://i.loli.net/2021/08/11/yIlb6hGFxmHM7vz.png" alt="avl.png"></p><p>其实上述四种情况实际上可以简单归结为两种情况（left-left, right-right）。</p><h4 id="1、left-left"><a href="#1、left-left" class="headerlink" title="1、left-left"></a>1、left-left</h4><p>图中可知，这个树是不平衡的，因为对于A节点来说他的平衡因子已经超过1了，该树不平衡的原因是B节点的插入。此时，如果我们要让这个树重新恢复平衡的话，就不能再让A节点作为根节点了，需要重新选一个节点作为根节点。</p><p><img src="https://i.loli.net/2021/08/12/ez3hpHSsGVmf5TR.png" alt="left-left.png"></p><p>我们可以将图中的x节点升为根节点，将y节点作为x的右节点，再将原先x节点的右节点给到y节点的左子树上。此操作我们称之为右旋转。</p><p>那么，从代码逻辑上是如何判定插入/删除元素后，树结构满足left-left呢？</p><pre><code class="c++">int factor = getBalanceFactor(node);if(factor &gt; 1 &amp;&amp; getBalanceFactor(node-&gt;left) &gt;= 0)    return rightRotate(node);</code></pre><h4 id="2、right-right"><a href="#2、right-right" class="headerlink" title="2、right-right"></a>2、right-right</h4><p>同理，对于right-right结构我们可以采取左旋转的方式保持平衡。</p><p><img src="https://i.loli.net/2021/08/12/FpE3mAnfyIHbZiP.png" alt="right-right.png"></p><pre><code class="C++">int factor = getBalanceFactor(node);if(factor &lt; -1 &amp;&amp; getBalanceFactor(node-&gt;right) &lt;= 0)    return leftRotate(node);</code></pre><h4 id="3、left-right"><a href="#3、left-right" class="headerlink" title="3、left-right"></a>3、left-right</h4><p>left-left和right-right可以说是AVL树的基本平衡逻辑，left-right可以通过将左子树先进行左旋转（转换成left-left），再将整个树进行右旋转。</p><h4 id="4、right-left"><a href="#4、right-left" class="headerlink" title="4、right-left"></a>4、right-left</h4><p>同理，right-left可以通过将右子树先进行右旋转（转换成right-right），再将整个树进行左旋转。</p><h3 id="3、AVL的自平衡代码实现"><a href="#3、AVL的自平衡代码实现" class="headerlink" title="3、AVL的自平衡代码实现"></a>3、AVL的自平衡代码实现</h3><h4 id="1、左旋转"><a href="#1、左旋转" class="headerlink" title="1、左旋转"></a>1、左旋转</h4><pre><code class="c++">Node* leftRotate(Node *y)&#123;    Node *x = y-&gt;right;    Node *left = x-&gt;left;    x-&gt;left = y;    y-&gt;right = left;        //这里注意，需要调整x,y的高度，因为左右旋转之后x,y的高度将会有变化，且先更新y的高度，    //再变更x的高度，因为x的高度是经过y的高度算出来的。    y-&gt;height = 1 + max(getHeight(y-&gt;left), getHeight(y-&gt;right));    x-&gt;height = 1 + max(getHeight(x-&gt;left), getHeight(x-&gt;right));        return x;&#125;</code></pre><h4 id="2、右旋转"><a href="#2、右旋转" class="headerlink" title="2、右旋转"></a>2、右旋转</h4><pre><code class="c++">Node* leftRotate(Node *y)&#123;    Node *x = y-&gt;right;    Node *left = x-&gt;left;    x-&gt;left = y;    y-&gt;right = left;        //这里注意，需要调整x,y的高度，因为左右旋转之后x,y的高度将会有变化，且先更新y的高度，    //再变更x的高度，因为x的高度是经过y的高度算出来的。    y-&gt;height = 1 + max(getHeight(y-&gt;left), getHeight(y-&gt;right));    x-&gt;height = 1 + max(getHeight(x-&gt;left), getHeight(x-&gt;right));        return x;&#125;</code></pre><h4 id="3、插入-删除-操作之后的平衡判定逻辑"><a href="#3、插入-删除-操作之后的平衡判定逻辑" class="headerlink" title="3、插入/删除 操作之后的平衡判定逻辑"></a>3、插入/删除 操作之后的平衡判定逻辑</h4><pre><code class="c++">Node *insert(Node node, Key key Value value)&#123;    ......            node-&gt;height = 1 + max(getHeight(node-&gt;left), getHeight(node-&gt;right));    int factor = getBalanceFactor(node);    //left-left    if(factor &gt; 1 &amp;&amp; getBalanceFactor(node-&gt;left) &gt;= 0)        return rightRotate(node);    //right-right    if(factor &lt; -1 &amp;&amp; getBalanceFactor(node-&gt;right) &lt;= 0)        return leftRotate(node);    //left-right    if(factor &gt; 1 &amp;&amp; getBalanceFactor(node-&gt;left) &lt; 0)&#123;        node-&gt;left = leftRotate(node-&gt;left);        return rightRotate(node);    &#125;    //right-left    if(factor &lt; -1 &amp;&amp; getBalanceFactor(node-&gt;right) &gt; 0)&#123;        node-&gt;right = rightRotate(node-&gt;right);        return leftRotate(node);    &#125;        return node;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 饭后甜点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis | 缓存雪崩、穿透</title>
      <link href="2021/06/03/QRedis-1/"/>
      <url>2021/06/03/QRedis-1/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要引入缓存"><a href="#为什么要引入缓存" class="headerlink" title="为什么要引入缓存"></a>为什么要引入缓存</h3><p> 当然是因为快！</p><p>一般性的，我们通常把用户的数据存储在数据库中，数据库中的数据最终是落到磁盘上去的，而磁盘读取数据相对于内存来讲，可以说是很慢的了。</p><p>因为 Redis 是内存数据库，我们可以将数据库的数据缓存在 Redis 里，相当于数据缓存在内存，内存的读写速度比硬盘快好几个数量级，这样大大提高了系统性能。 </p><p>在实际生产环境中，将十几万块的电表信息全部存入Redis，连带对应的合同信息、采样数据、采样配置信息、费率等等，这也带来了较大的风险。</p><p> 引入了缓存层，就会有缓存异常的问题，分别是<strong>缓存雪崩、缓存穿透</strong>。 </p><span id="more"></span><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><h4 id="1、缓存雪崩的原因"><a href="#1、缓存雪崩的原因" class="headerlink" title="1、缓存雪崩的原因"></a>1、缓存雪崩的原因</h4><p>引入缓存后，不可避免的，就会发生缓存中的数据和数据库中的数据出现不一致的情况。</p><p>例如，当对一块电表进行充值的时候，首先去缓存中取该电表的合同信息，但实际上这块表在刚刚进行过合同变更，合同已经进行了调整，缓存中存储的实际上是旧的合同信息，所以充值成功后，插入的充值记录就会错误，从而影响财务的做账。</p><p> 通常我们为了保证缓存中的数据与数据库中的数据一致性，会给 Redis 里的数据设置过期时间，当缓存数据过期后，用户访问的数据如果不在缓存里，业务系统需要重新生成缓存，因此就会访问数据库，并将数据更新到 Redis 里，这样后续请求都可以直接命中缓存。 同时，对于进行业务变更的数据，要及时更新到Redis的缓存数据。</p><p>所谓的<strong>缓存雪崩</strong>就是 当大量缓存数据在同一时间过期（失效）或者 Redis 故障宕机时，如果此时有大量的用户请求，都无法在 Redis 中处理，于是全部请求都直接访问数据库，从而导致数据库的压力骤增，严重的会造成数据库宕机，从而形成一系列连锁反应，造成整个系统崩溃 。</p><p>发生缓存雪崩主要有两个原因：</p><p><strong>1、大量数据同时过期</strong></p><p><strong>2、Redis故障宕机</strong></p><h4 id="2、解决方案"><a href="#2、解决方案" class="headerlink" title="2、解决方案"></a>2、解决方案</h4><h5 id="1、大量数据同时过期"><a href="#1、大量数据同时过期" class="headerlink" title="1、大量数据同时过期"></a>1、大量数据同时过期</h5><p>1、设置均匀的过期时间</p><p>顾名思义，就是让不同key的过期时间不一样，可以给key的过期时间加上一个随机数，保证数据不会在同一个时间节点上有大量的key过期。</p><p>2、互斥锁</p><p>为什么要设置互斥锁？如何使用这互斥锁？</p><p>大量的请求访问Redis中的数据，但是只要保证一个请求在从Redis拿数据拿不到的情况下，再从数据库中取，然后回写Redis即可。</p><p>3、后台更新缓存</p><p>写一个专门的服务（线程）用来更新Redis缓存中的数据，缓存的数据不再设置过期时间。</p><h5 id="2、Redis的高可用"><a href="#2、Redis的高可用" class="headerlink" title="2、Redis的高可用"></a>2、Redis的高可用</h5><p>通过主从节点的方式构建Redis缓存高可靠的集群方案。</p><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>当用户访问的数据，<strong>既不在缓存中，也不在数据库中</strong>，导致请求在访问缓存时，发现缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据，没办法构建缓存数据，来服务后续的请求。那么当有大量这样的请求到来时，数据库的压力骤增，这就是<strong>缓存穿透</strong>的问题。</p><p>这种情况我遇见的比较少，在智能电表平台的系统中，一般后台服务接收前台传过来的数据都是存在的数据。</p><p>应对缓存穿透，一般性的也有常见的方案可以参考。网上其他的资源比较多，这里想说的是通过<strong>布隆过滤器</strong>来快速判断数据是否存在，避免通过查询数据库来判断数据是否存在。</p><blockquote><p>布隆过滤器是引入了k(k&gt;1)k(k&gt;1)个相互独立的哈希函数，保证在给定的空间、误判率下，完成元素判重的过程。 它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><p>该算法的<strong>核心思想</strong>就是利用多个不同的Hash函数来解决“冲突”。Hash存在一个冲突（碰撞）的问题，用同一个Hash得到的两个URL的值有可能相同。为了减少冲突，我们可以多引入几个Hash，如果通过其中的一个Hash值我们得出某元素不在集合中，那么该元素肯定不在集合中。只有在所有的Hash函数告诉我们该元素在集合中时，才能确定该元素存在于集合中。这便是布隆过滤器的基本思想，一般用于在大数据量的集合中判定某元素是否存在。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聊聊map的插入方式</title>
      <link href="2021/04/29/STLSourceCodeAnalysis_2/"/>
      <url>2021/04/29/STLSourceCodeAnalysis_2/</url>
      
        <content type="html"><![CDATA[<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><p>map元素插入的形式有两种，一种是使用insert()函数插入，一种是下标（subscript）的方式插入。</p><h3 id="1、insert"><a href="#1、insert" class="headerlink" title="1、insert()"></a>1、insert()</h3><p>insert()的这种插入方式在开发过程中是最经常使用的，但是我却没有深入了解到这个接口内部中去，查阅了相关材料，找到了这个接口的原型。</p><pre><code class="c++">pair&lt;iterator, bool&gt; insert(const value_type &amp;x)&#123;    return t.insert_uique(x);&#125;</code></pre><p> 这个接口最引入瞩目的就是他的返回值类型是一个pair。这个pair的第一个元素是迭代器，第二个元素是一个bool型的参数。当insert()插入操作后，bool表示的是插入操作是否成功，iterator这个迭代器在插入成功的时候，迭代器指向的就是这个元素。</p><span id="more"></span><h3 id="2、subscript"><a href="#2、subscript" class="headerlink" title="2、subscript"></a>2、subscript</h3><p>平常的开发过程中，下标的使用一般有两种，一个是赋值，一个是取值，如下。</p><pre><code class="c++">map&lt;int , int &gt; map;......map[1] = 5;            //赋值操作int num = map[1];    //取值操作</code></pre><p>要同时满足这两种操作，那么下标操作的返回值必然是取地址的传递形式，即by reference。</p><p>通过查看map的相关定义，我们可以清楚的知道，STL内部是如何实现这样操作的。</p><pre><code class="C++">class map&#123;public:    typedef Key key_type;    typedef pair&lt;const Key, T&gt; value_type;    ......public:    T&amp; operator[](const key_type &amp;k)&#123;        return (*((insert(value_type(k, T()))).first)).second;             //语句A    &#125;&#125;;</code></pre><p>语句A看似很复杂，其实从里面分析一下就可以很清晰的知道map下标操作的原理。</p><h4 id="1、value-type-k-T"><a href="#1、value-type-k-T" class="headerlink" title="1、value_type(k, T())"></a>1、value_type(k, T())</h4><p>首先构造一个map的pair，这个pair呢包括传进来的key以及默认初始化的value（由于value值不可知，所以暂时产生了一个和实际值类型相同的暂时对象）。</p><h4 id="2、insert-value-type-k-T"><a href="#2、insert-value-type-k-T" class="headerlink" title="2、insert(value_type(k, T()))"></a>2、insert(value_type(k, T()))</h4><p>其次，将我们上述构造的的pair插入到map中去。按上述所说的，该insert操作会返回一个pair，pair的第一个元素是迭代器。这个迭代器，如果是插入成功了的，就是指向插入后的新元素，如果是插入失败了的，就是指向插入失败点的旧元素。</p><h4 id="3、-insert-value-type-k-T-first"><a href="#3、-insert-value-type-k-T-first" class="headerlink" title="3、*((insert(value_type(k, T()))).first"></a>3、*((insert(value_type(k, T()))).first</h4><p>按照第二步所讲，取出insert返回给我们的pair的第一个元素，即返回的迭代器。</p><h4 id="4、-insert-value-type-k-T-first-second"><a href="#4、-insert-value-type-k-T-first-second" class="headerlink" title="4、(*((insert(value_type(k, T()))).first)).second;"></a>4、(*((insert(value_type(k, T()))).first)).second;</h4><p>最后，通过返回给我们的迭代器，取到我们所想要的值。</p><p>根据以上讲的四个步骤，着重分析一下上述谈到的“赋值”和“取值”操作。</p><p><strong>取值操作</strong>（一般是map中已有的操作）：</p><p>int num = data[5];</p><p>首先构造一个key是5的pair，在insert的时候发现map中已经有了key为5的记录，那么insert的接口返回key为5的迭代器，依据这个迭代器找到key为5的实值（value），最终这个值给到num。</p><p><strong>赋值操作</strong>：</p><p>data[5] = 7;</p><p>首先还是构造出key为5的pair，在insert的时候，接口返回的true，插入成功，拿到插入成功后的迭代器，进而取到key为5的值（默认的构造的暂时对象的值），最终将7这个值赋给到这个暂时的值。</p><p><strong>特别强调：下标操作的返回值是取地址的传递形式，即by reference。</strong></p>]]></content>
      
      
      <categories>
          
          <category> STL源码分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>说说堆排序</title>
      <link href="2021/04/19/HeapSort/"/>
      <url>2021/04/19/HeapSort/</url>
      
        <content type="html"><![CDATA[<h2 id="1、堆排序"><a href="#1、堆排序" class="headerlink" title="1、堆排序"></a>1、堆排序</h2><p>什么是堆？</p><p><strong>堆是具有以下性质的完全二叉树：每个结点的值都大于或等于其左右孩子结点的值，称为大顶堆；或者每个结点的值都小于或等于其左右孩子结点的值，称为小顶堆。</strong> </p><p>什么是堆排序？</p><p><strong>堆排序是利用堆这种数据结构而设计的一种排序算法，堆排序是一种选择排序，它的最坏，最好，平均时间复杂度均为O(nlogn)，它也是不稳定排序。首先简单了解下堆结构。</strong> </p><p>先前在读《STL源码分析》中做过一个堆的实现，具体见“STL源码分析”归类下的文章。事实上那个堆的实现已经可以算作堆排序了，只要依次把数据投入到堆中，再将他们依次投出即可完成排序。但是由于上述的实现存在内存的申请，影响效率，故提供下述不需要额外空间实现的堆排序。</p><span id="more"></span><h2 id="2、堆排序的思想"><a href="#2、堆排序的思想" class="headerlink" title="2、堆排序的思想"></a>2、堆排序的思想</h2><p>所谓堆排序，实际上是模拟出<strong>大顶堆</strong>，然后依次输出出来。那么这就会牵扯出两个操作流程，一个操作流程就是如何将现有的数组转换成大顶堆的表现形式，第二个操作是如何调整数组元素的位置，实现排序的效果。以上的两个操作流程，前者我们称之为<strong>堆化</strong>，后者我们称为<strong>排序</strong>。</p><h3 id="堆化"><a href="#堆化" class="headerlink" title="堆化"></a>堆化</h3><p>如何在不占用额外空间的基础上实现快速的堆化过程呢？</p><p>从最底层的且是最右边的一个最小子树开始算起，找出两个子节点的最大值，将其和父节点交换，以此实现堆化的过程。</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序的思想较为简单，将堆化后数组第一个元素和最后一个元素交换（实际上是把数组中最大的一个元素放在了数组的末尾），再将除最后一个元素的前面的一段数组再次进行堆化处理（实际上是找出剩下的数组中的最大的元素），直至完全排序。</p><h2 id="3、堆排序的技术实现"><a href="#3、堆排序的技术实现" class="headerlink" title="3、堆排序的技术实现"></a>3、堆排序的技术实现</h2><pre><code class="c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;ctime&gt;#include &lt;cmath&gt;#include &lt;cassert&gt;using namespace std;template&lt;typename T&gt;void _shiftDown(T arr[], int size, int k)&#123;    //堆的一个经典实现是不使用数组的第一个元素，因为这样会使左右子节点容易理解    //当前节点是在数组的k个位置上，则左节点是2k，右节点是2k+1。    //但是我们现在利用的是元素组的空间进行排序，必然不可能再开辟新空间进行操作，所以会使用数组0的位置。    //那么明显的，当前节点是在数组的k个位置上，则左节点是2k+1，右节点是2k+2。    //下述的操作和之前写的一篇关于heap的实现逻辑几乎没有改变，此处不在重复说明。    while(2 * k + 1 &lt; size)&#123;        int left = 2 * k + 1;        int right = left + 1;        int mark = left;        if(right &lt; size &amp;&amp; arr[right] &gt; arr[left])&#123;            mark = right;        &#125;        if(arr[k] &gt; arr[mark]) break;        swap(arr[k], arr[mark]);        k = mark;    &#125;    return ;&#125;template&lt;typename T&gt;void heapsort(T arr[], int n)&#123;        //heapify    //建堆（make heap）    for(int i = (n - 1 - 1) / 2; i &gt;= 0; i--)&#123;        _shiftDown(arr, n, i);    &#125;        //在已经堆化的数组中，调整位置，进而实现排序，具体操作流程如下：    //1、堆化后的数组，最大值一定是首元素，交换首元素和末尾元素的位置    //2、将除末尾元素的前面的数组成员再次进行_shiftDown(下溯)操作    //3、重复上述流程    for(int i = (n - 1); i &gt;= 0; i--)&#123;        swap(arr[0], arr[i]);        _shiftDown(arr, i, 0);    &#125;&#125;int main()&#123;    //简单的测试    int arr[] = &#123;3, -1, 5, 4, 9, 6, 10, 8&#125;;    int size = sizeof(arr) / sizeof(int);            heapsort(arr, size);        for(int i = 0; i &lt; size; i++)&#123;        cout &lt;&lt; arr[i] &lt;&lt; endl;    &#125;    return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 饭后甜点 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Sequence Contaniners - [vector][heap]</title>
      <link href="2021/03/29/STLSourceCodeAnalysis_1/"/>
      <url>2021/03/29/STLSourceCodeAnalysis_1/</url>
      
        <content type="html"><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p>vector的数据安排以及操作方式，与array非常相似。两者唯一的差别在于<strong>空间运用的灵活性</strong>。array是静态空间，一旦配置了就不能改变。vector是<strong>动态空间</strong>，随着元素的加入，他的内部机制会自行扩充空间以及容纳新元素。</p><p>vector的实现技术，关键在于其对大小的控制以及重新配置时的数据移动效率。一旦vector旧有空间满载，如果客户端每新增一个元素，vector内部只是扩充一个元素的空间，实为不明智，因为所谓扩充空间（不论多大），是<strong>“配置新空间  / 数据移动 / 释放旧空间”</strong>的一系列操作，时间成本很高，应加入某种未雨绸缪的考虑。</p><h3 id="2、迭代器"><a href="#2、迭代器" class="headerlink" title="2、迭代器"></a>2、迭代器</h3><p>vector维护的是一个连续线性空间，所以无论器元素类型是什么，普通指针都可以作为vector的迭代器而满足所有必要的条件。vector支持随机存储，普通指针正是有着这样的能力的，所以vector提供的是**<strong>Random Access iterators</strong>**。</p><span id="more"></span><h3 id="3、数据结构"><a href="#3、数据结构" class="headerlink" title="3、数据结构"></a>3、数据结构</h3><p>vector采用的数据结构是线性连续控件。它以两个迭代器*<strong>start</strong><em>和</em><strong>finish</strong><em>分别指向配置得来的连续空间中目前已被使用的范围，并以迭代器</em><strong>end_of_storage</strong>*指向整块连续空间（含备份空间）的尾端。</p><pre><code class="cpp">tmplate&lt;class T, class Alloc = alloc&gt;class vector&#123;...protected:    iterator start;                //表示目前使用空间的头    iterator end;                //表示目前使用空间的尾    iterator end_of_storage;    //表示目前可用空间的尾...&#125;</code></pre><p>为了降低空间配置时的速度成本，vector实际配置的大小可能比客户端需求量更大一些，以备将来可能的扩充。这边是<strong>容量（capacity）</strong>的观念。如下图所示。</p><p><img src="https://i.loli.net/2021/03/29/X2IEQPbznlGrAB8.png" alt="stl-vector.png"></p><p>运用start，finish，end_of_storage三个迭代器，便可轻易地提供首尾标识、大小、容量、空容器判断等等机能。</p><pre><code class="c++">tmplate&lt;class T, class Alloc = alloc&gt;class vector&#123;...public:    iterator begin() &#123;return start;&#125;    iterator end() &#123;return finish;&#125;    size_type size() const &#123;return size_type( end() - being() );&#125;    size_type capacity() const &#123;        return size_type( end_of_storage - begin() );    &#125;    bool empty() const &#123;return begin() == end();&#125;        reference front() &#123;return *begin();&#125;    reference back() &#123;return *(end() - 1);&#125;...&#125;</code></pre><p>关于容量，有一点想要说明。增加新元素（s）时，如果超过当时的容量，则用量会扩充至两倍。如果两倍容量仍不足，就扩张至足够大的容量。容量的扩张必须经历<strong>“重新配置、元素移动、释放原空间”</strong>等过程。</p><p>所谓动态增加大小，并不是在原空间之后接续新空间（因为无法保证原空间之后尚有可控配置的空间），而是以原大小的两倍另外配置一块较大的空间，然后将原内容拷贝过来，然后才开始再原内容之后构造新元素，并释放原空间。因此，对vector的任何操作，一旦引起空间重新配置，指向原vector的所有迭代器就都失效了。</p><h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h2><h3 id="1、概述-1"><a href="#1、概述-1" class="headerlink" title="1、概述"></a>1、概述</h3><p>heap并不属于STL容器组件，他和*<strong>priority queue</strong>*相关。priority queue允许以任何次序将任何元素推进容器内，但是取出时一定是以优先权最高（也就是数值最高）的元素开始取。</p><p>将binary heap 作为 priority queue 的底层机制。</p><p>所谓的binary heap就是一种完全二叉树，也就是说整颗binary tree除了最底层的叶节点之外，是填满的，而最底层的叶节点由左到右又不得有空隙。如下图所示一个完全的二叉树以及array表达式：</p><p><img src="https://i.loli.net/2021/04/08/uWp5qFPJ1RCLScr.png" alt="binaryheap.png"></p><p>完全二叉树有一个最大的好处就是整棵树内没有任何节点漏洞，这就可以用array来存储所有的节点。为了后续的方便计算，将array的#0的位置设置为无限大值或者是无限小值，那么当完全二叉树中的某个节点位于array的i处时，他的左节点必定是位于array的2i处，他的右节点必定位于array的2i+1处，其父节点必定位于（i/2）处，通过这样的一个简单的位置规则，array可以轻易的实现出完全二叉树。事实上，上述vector可以完美替代array。</p><p>根据元素的排列方式，heap可以氛围max-heap和min-heap两种，前者每个节点的键值（key）都大于或者等于其子节点键值。后者的每个节点的键值（key）都小于或者等于其子节点键值。因此，max-heap的最大值在根节点，并总是位于底层array或者vector的开始处；min-heap的最小值在根节点，并总是位于底层array或者vector的开始处；STL提供的是max-heap。</p><h3 id="2、heap算法"><a href="#2、heap算法" class="headerlink" title="2、heap算法"></a>2、heap算法</h3><h4 id="1、push-heap算法"><a href="#1、push-heap算法" class="headerlink" title="1、push_heap算法"></a>1、push_heap算法</h4><pre><code class="c++">void shiftUp(int k)&#123;        //循环判定末尾节点是否大于其父节点        //大于其父节点，则当前节点和父节点交换以满足大顶堆的性质        //直至直至判定到根节点        while(k &gt; 1 &amp;&amp; data[k] &gt; data[k / 2])&#123;            swap(data[k], data[k / 2]);            k /= 2;        &#125;    &#125;</code></pre><p>push_heap的算法是指将新来的元素加入到堆中去，该堆所要进行的调整。</p><p>push_heap算法的主要步骤：</p><p>1、将新增的节点加在连续空间的最后面。</p><p>2、将新增的节点“上溯”。</p><p>3、继续调整节点所在子树，使其满足父节点始终大于子节点。</p><h4 id="2、pop-heap算法"><a href="#2、pop-heap算法" class="headerlink" title="2、pop_heap算法"></a>2、pop_heap算法</h4><pre><code class="c++">void shiftDown(int k)&#123;        while(2 * k &lt;= count)&#123;            int left = 2 * k;            int right = left + 1;            int mark = left;            if(right &lt;= count &amp;&amp; data[right] &gt; data[left])&#123;                mark = right;            &#125;            if(data[k] &gt; data[mark]) break;            swap(data[k], data[mark]);            k = mark;        &#125;    &#125;</code></pre><p>pop_heap的算法是指将首元素从堆中删除的操作，以及该堆所要进行的调整。</p><p>pop_heap算法的主要步骤：</p><p>1、将收尾元素互换，删除尾元素（所谓删除尾元素即把堆中“游标”移位）</p><p>2、将首元素进行“下溯”操作</p><p>3、找到子节点的最大值的节点</p><h3 id="3、heap没有迭代器"><a href="#3、heap没有迭代器" class="headerlink" title="3、heap没有迭代器"></a>3、heap没有迭代器</h3><p>heap的所有元素都必须遵循特别的（完全二叉树）的排列规则，所以heap不提供遍历功能，也不提供迭代器。</p><h3 id="4、堆的实现"><a href="#4、堆的实现" class="headerlink" title="4、堆的实现"></a>4、堆的实现</h3><pre><code class="c++">#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;ctime&gt;#include &lt;cmath&gt;#include &lt;cassert&gt;using namespace std;template&lt;typename Item&gt;class MaxHeap&#123;private:    Item *data;    int count;    int capacity;        void shiftUp(int k)&#123;        while(k &gt; 1 &amp;&amp; data[k] &gt; data[k / 2])&#123;            swap(data[k], data[k / 2]);            k /= 2;        &#125;    &#125;        void shiftDown(int k)&#123;        while(2 * k &lt;= count)&#123;            int left = 2 * k;            int right = left + 1;            int mark = left;            if(right &lt;= count &amp;&amp; data[right] &gt; data[left])&#123;                mark = right;            &#125;            if(data[k] &gt; data[mark]) break;            swap(data[k], data[mark]);            k = mark;        &#125;    &#125;        public:    MaxHeap(int capacity)&#123;        data = new Item[capacity + 1];        this-&gt;capacity = capacity;        count = 0;    &#125;        ~MaxHeap()&#123;        delete [] data;    &#125;        int size()&#123;        return count;    &#125;        bool isEmpty()&#123;        return count == 0;    &#125;        void insert(Item item)&#123;        assert(count + 1 &lt;= capacity);        data[count + 1] = item;        count++;        shiftUp(count);    &#125;        Item extractMax()&#123;        assert(count &gt; 0);        Item item = data[1];        swap(data[1], data[count]);        count--;        shiftDown(1);        return item;    &#125;        Item getMax()&#123;        assert(count &gt; 0);        return data[1];    &#125;    &#125;;int main()&#123;        MaxHeap&lt;int &gt; maxheap = MaxHeap&lt;int &gt;(10);        maxheap.insert(4);    maxheap.insert(9);    maxheap.insert(7);    maxheap.insert(3);    maxheap.insert(5);    maxheap.insert(1);    maxheap.insert(2);    maxheap.insert(8);        int size = maxheap.size();        for(int i = 0; i &lt; size; i++)&#123;        cout &lt;&lt; &quot;The maxheap item is &quot; &lt;&lt; maxheap.extractMax() &lt;&lt; endl;    &#125;        return 0;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> STL源码分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>卓有成效的管理者（1）</title>
      <link href="2021/03/20/WhyChooseToRead/"/>
      <url>2021/03/20/WhyChooseToRead/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-03-20摘录："><a href="#2021-03-20摘录：" class="headerlink" title="2021-03-20摘录："></a>2021-03-20摘录：</h1><p>1、如何<strong>自我管理</strong>才能成为卓有成效的管理者。</p><p>2、管理者做事必须有效。</p><p>3、知识工作者本人必须自己管理自己，自觉地完成任务，自觉地做出贡献，自觉地追求工作效益。</p><p>4、如果他的工作缺少有效性，那么他对做好工作和做出贡献的热情很快就会消退，他将成为朝九晚五在办公室消磨时间的人。</p><span id="more"></span><h1 id="思考："><a href="#思考：" class="headerlink" title="思考："></a>思考：</h1><h2 id="一、自我管理"><a href="#一、自我管理" class="headerlink" title="一、自我管理"></a>一、自我管理</h2><p>这方面我个人是有尝试过的。比如规范自我的生活习惯，小到每日的饮食、作息，大到每周的学习任务，再如工作中的情绪管理。上述的两次尝试让我深刻的感觉自己的自我约束能力有待加强，人的惰性的还是很大的，需要借助一定的外力或者精神上的目标来激励自己。习惯容易养成，但也不容易养成，这取决于个人的意志是否足够强大，强大到能够用理智来决定个人的行为。如果是单纯的制定每周的学习任务，没有一个明确的目标作为指导，这样的学习就会显得没有目标，哪怕是这样的目标是读完一本书，也会比没有目标的学习更有成效。我始终觉得，个人的情绪管理在工作中异常的重要。之前有读过项目管理的相关书籍，里面有谈到什么是情商，我认为解释的很好，也确实让我对情商有了不同且较为深入的理解。</p><blockquote><p> 情商，也叫情绪智商。主要包括两大方面，一是意识到自己情绪的变化，并能控制自己情绪的能力。二是意识到旁人情绪的变化，并能及时调整，顾及到旁人感受的能力。</p></blockquote><p>不喜欢合作，不愿意沟通，脾气急躁且容易动怒，都表示一个人的情商很低，这不利于我们在日常工作中处理人际关系。工作上经常遇到情绪失控的事情，这是正常的，难免会遇到思考方式以及解决问题的思路不一样的人，但自己如何控制自己的情绪就是很重要的一件事。</p><blockquote><p>1、暂时放下自己的观点，多倾听别人的想法。</p><p>2、通过换位思考的方式，让自己更多的了解别人的感受，这样可以减少自己对别人情绪的忽视。</p><p>3、深呼吸，不要急于在人面前表达自己愤怒的情绪，尝试缓和自己的情绪。</p><p>4、事后冷静思考面对情绪失控场景时自己的行为，警惕自己下次不要再次陷入情绪中，用分析思考代替盲目冲动。</p></blockquote><p>自我管理是个需要长期进行的一个过程，也是一个需要长期学习的过程。也就是说长期自我管理，长期学习自我管理。</p><h2 id="二、工作有效性"><a href="#二、工作有效性" class="headerlink" title="二、工作有效性"></a>二、工作有效性</h2><p>所谓工作有效性，就是“做好该做的事情”的能力。</p><p>通常，我们是具备这样的能力的，但是却不代表我们永远具备这样的能力。作为代码开发者，我们整个职业生涯都伴随着学习，因为技术的更新异常的快，可能无法站在技术的前沿，但是决不能让自己落在队伍的后面。我们不仅仅是为了满足有这样的能力，也是为了自身的能力的提升。</p><p>就我个人而言，工作的两三年积累虽然也是较为客观，但是始终无法形成自己的东西。我可能会在生产环境使用Redis、ElasticSearch、Nginx、RocketMQ等等，但是我们仅仅停留在使用，没有进一步的深入了解到他们的运作原理，这也是我以后学习的重点方向。好记性不如烂笔头，多看几次也不如形成文件的记录下来，温故而知新。所以，后续在Hexo搭建的个人平台上也会多多记录这些内容，这样的内容记录是基于书本上的，因为书本是知识的来源。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Clover</title>
      <link href="2021/03/13/Clover/"/>
      <url>2021/03/13/Clover/</url>
      
        <content type="html"><![CDATA[<p>#Test</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
